upstream auth {
    server host.docker.internal:8080;
}

upstream backend {
    server host.docker.internal:8888;
}

upstream frontend {
    server host.docker.internal:9999;
}

server {
  listen 8080;
  listen [::]:80;
  server_name localhost;

  proxy_intercept_errors on;     # Do not send backend errors to the client
  default_type application/json; # If no content-type then assume JSON

  location /api/auth {
    # запросы на /api/auth не проксируем
    proxy_pass http://auth/api/auth;
  }

  location = /api/_auth_token {
    internal;
    proxy_pass http://auth/api/auth/verify;
    proxy_pass_request_body off; # не проксировать body
    # по умолчанию nginx будет проксировать все заголовки оригинального запроса
    proxy_set_header Content-Length "";
    # чтобы у нас был оригинальный URI (если захотим делать авторизацию)
    proxy_set_header X-Original-URI $request_uri;
  }

  location / { # /api/demo/**
    auth_request /api/_auth_token; # 2xx -> ok, 4xx -> not ok
    # берёт из ответа proxy response header X-Profile
    # создаём локальную переменную $profile
    # https://nginx.org/ru/docs/http/ngx_http_upstream_module.html#var_upstream_http_
    auth_request_set $profile $upstream_http_x_profile;
    # proxy_set_header(X-Profile, $profile)
    proxy_set_header X-Profile $profile;
    proxy_pass http://backend;
  }

  error_page 400 = @400;
  location @400 { return 400 '{"status":400,"message":"Bad request"}'; }

  error_page 401 = @401;
  location @401 { return 401 '{"status":401,"message":"Unauthorized"}'; }

  error_page 403 = @403;
  location @403 { return 403 '{"status":403,"message":"Forbidden"}'; }

  error_page 404 = @404;
  location @404 { return 404 '{"status":404,"message":"Resource not found"}'; }
}